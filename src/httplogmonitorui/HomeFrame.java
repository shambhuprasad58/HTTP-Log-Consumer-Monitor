/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package httplogmonitorui;

import httplogmonitorutil.Alert;
import httplogmonitorutil.HttpObject;
import httplogmonitorutil.Statistics;
import httplogmonitorutil.UserPreferences;
import httplogmonitorutil.Utility;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shambhu
 */
public class HomeFrame extends javax.swing.JFrame {

    private LinkedBlockingQueue<UserPreferences> preferenceQueue;
    private LinkedBlockingQueue<ArrayList<HttpObject>> mostHitsTopURL;
    private LinkedBlockingQueue<Alert> alertQueue;
    private LinkedBlockingQueue<Statistics> statsQueue;
    private String logFile;
    private Alert previousAlert, previousPeakAlert;
    private JPanel alertsPanel;
    private String[] columns = {"URI Section","Hit Count"};
    /**
     * Creates new form HomeFrame
     */
    public HomeFrame(LinkedBlockingQueue<UserPreferences> preferenceQueue, LinkedBlockingQueue<Alert> alertQueue, 
            LinkedBlockingQueue<Statistics> statsQueue, LinkedBlockingQueue<ArrayList<HttpObject>> mostHitsTopURL)
    {
        this.preferenceQueue = preferenceQueue;
        this.mostHitsTopURL = mostHitsTopURL;
        this.alertQueue = alertQueue;
        this.statsQueue = statsQueue;
        this.mostHitsTopURL = mostHitsTopURL;
        this.logFile = "";
        previousAlert = new Alert(null, 0, false);
        previousPeakAlert = new Alert(null, 0, true);
        initComponents();
        initilizeAll();
        try {
            updateNewHits();
        } catch (InterruptedException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        alertsScrollPane = new javax.swing.JScrollPane();
        mostHitsScrollPane = new javax.swing.JScrollPane();
        mostHitsTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        statsTable = new javax.swing.JTable();
        userInputPanel = new javax.swing.JPanel();
        mostHitsTextField = new javax.swing.JTextField();
        alertTextField = new javax.swing.JTextField();
        thresholdTextField = new javax.swing.JTextField();
        userPreferenceUpdateButton = new javax.swing.JButton();
        fileChooserButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        logFilePathTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 480));
        setResizable(false);

        mostHitsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "URL Section", "Hit Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mostHitsScrollPane.setViewportView(mostHitsTable);

        statsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Statistics", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        statsTable.setRowHeight(25);
        jScrollPane3.setViewportView(statsTable);

        mostHitsTextField.setText("10");

        alertTextField.setText("120");

        thresholdTextField.setText("20");

        userPreferenceUpdateButton.setText("Start");
        userPreferenceUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userPreferenceUpdateButtonActionPerformed(evt);
            }
        });

        fileChooserButton.setText("Choose File");
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText("Alert Period");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText("Maximum Hit Period");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setText("Alert Threshold");

        logFilePathTextField.setEditable(false);
        logFilePathTextField.setText("File");

        javax.swing.GroupLayout userInputPanelLayout = new javax.swing.GroupLayout(userInputPanel);
        userInputPanel.setLayout(userInputPanelLayout);
        userInputPanelLayout.setHorizontalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userInputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mostHitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileChooserButton))
                .addGap(60, 60, 60)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userInputPanelLayout.createSequentialGroup()
                        .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(userInputPanelLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(userInputPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(190, 190, 190))
                            .addGroup(userInputPanelLayout.createSequentialGroup()
                                .addComponent(thresholdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(userPreferenceUpdateButton)
                                .addGap(33, 33, 33))))
                    .addComponent(logFilePathTextField)))
        );
        userInputPanelLayout.setVerticalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mostHitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thresholdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userPreferenceUpdateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileChooserButton)
                    .addComponent(logFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("HTTP Log Monitor");

        jLabel9.setText("Maximum Hit Sections");

        jLabel6.setText("ALERTS");

        jLabel8.setText("Statistics");

        jLabel7.setText("Inputs");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mostHitsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(jLabel8)))
                        .addGap(145, 145, 145)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(394, 394, 394))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(332, 332, 332))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(userInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alertsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))))
            .addGroup(layout.createSequentialGroup()
                .addGap(520, 520, 520)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alertsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mostHitsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initilizeAll()
    {
        statsTable.setValueAt("Request Count", 0, 0);
        statsTable.setValueAt("Successful Requests", 1, 0);
        statsTable.setValueAt("Bytes Downloaded", 2, 0);
        alertsPanel = new JPanel();
        alertsPanel.setLayout(new BoxLayout(alertsPanel, BoxLayout.Y_AXIS));
        alertsScrollPane.setViewportView(alertsPanel);
    }
    
    private void userPreferenceUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userPreferenceUpdateButtonActionPerformed
        if(!inputValidator())
        {
            JOptionPane.showMessageDialog(this, "Check your input.");
            return;
        }
        userPreferenceUpdateButton.setText("Update");
        if(logFile == null || logFile.isEmpty())
            return;
        UserPreferences userPreferences = new UserPreferences(Integer.parseInt(thresholdTextField.getText()), logFile, 
                Integer.parseInt(mostHitsTextField.getText())*1000, Integer.parseInt(alertTextField.getText())*1000);
        try {
            preferenceQueue.put(userPreferences);
        } catch (InterruptedException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userPreferenceUpdateButtonActionPerformed
    
    private boolean inputValidator()
    {
        try
        {
            if(Integer.parseInt(thresholdTextField.getText()) < 1) return false;
            if(Integer.parseInt(alertTextField.getText()) < 1) return false;
            if(Integer.parseInt(mostHitsTextField.getText()) < 1) return false;
            File f = new File(logFile);
            if(f.exists() && !f.isDirectory()) 
            { 
                return true;
            }
            return false;
        }
        catch(Exception ex)
        {
            return false;
        }
    }
    
    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(HomeFrame.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = new File(fileChooser.getSelectedFile().getAbsolutePath());
            if(f.exists() && !f.isDirectory()) 
            { 
                logFile = fileChooser.getSelectedFile().getAbsolutePath();
                logFilePathTextField.setText(logFile);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "File does not exists.");
                return;
            }
        }
    }//GEN-LAST:event_fileChooserButtonActionPerformed

    private void updateNewHits() throws InterruptedException
    {
        Timer timer = new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateMostHitsTable();
                updateStatsTable();
                postAlerts();
            }
         });
         timer.setDelay(1000); // update UI every 1 second
         timer.start();
    }
    
    private void updateMostHitsTable()
    {
        if(mostHitsTopURL.isEmpty())
            return;
        final DefaultTableModel tableModel = new DefaultTableModel(columns,0);
        try {
            ArrayList<HttpObject> topURLs = mostHitsTopURL.take();
            if(topURLs.isEmpty())
                return;
            for(HttpObject obj : topURLs)
            {
                tableModel.addRow(new String[]{Utility.getSection(obj.getUrl()), String.valueOf(obj.getHitCount())});
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        mostHitsTable.setModel(tableModel);
        mostHitsTable.repaint();
        mostHitsTable.revalidate();
    }
    
    private void updateStatsTable()
    {
        if(statsQueue.isEmpty())
            return;
        try {
            Statistics stats = null;
            while(!statsQueue.isEmpty())
                stats = statsQueue.take();
            statsTable.setValueAt(stats.getHitCount(), 0, 1);
            statsTable.setValueAt(stats.getSuccessfulHits(), 1, 1);
            statsTable.setValueAt(stats.getKiloBytesDownloaded(), 2, 1);
            statsTable.repaint();
            statsTable.revalidate();
        } catch (InterruptedException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void postAlerts()
    {
        if(alertQueue.isEmpty())
            return;
        try {
            while(!alertQueue.isEmpty())
            {
                Alert alert = alertQueue.take();
                if(alert.getAlertType() != previousAlert.getAlertType())
                {
                    if(alert.getAlertType())
                    {
                        addAlertRow("High traffic alert - hits = "+alert.getHitCount()+", triggered at "+alert.getAlertTime(), Color.RED);
                    }
                    else
                    {
                        addAlertRow("Peak traffic - hits = "+previousPeakAlert.getHitCount()+", triggered at "+previousPeakAlert.getAlertTime(), 
                                Color.RED);
                        addAlertRow("Traffic back to normal - hits = "+alert.getHitCount()+", at "+alert.getAlertTime(), Color.BLACK);
                        previousPeakAlert = new Alert(null, 0, true);
                    }
                }
                if(alert.getHitCount() > previousPeakAlert.getHitCount())
                {
                    previousPeakAlert = alert;
                }
                previousAlert = alert;
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addAlertRow(String text, Color foregroundColor)
    {
        JPanel newPanel = new JPanel();
        newPanel.setPreferredSize(new Dimension(530, 25));
        JTextField peakTrafficTextField = new JTextField();
        peakTrafficTextField.setBounds(0, 0, 520, 20);
        peakTrafficTextField.setText(text);
        peakTrafficTextField.setForeground(foregroundColor);
        peakTrafficTextField.setEditable(false);
        newPanel.add(peakTrafficTextField);
        alertsPanel.add(newPanel);
        alertsPanel.repaint();
        alertsPanel.revalidate();
        alertsScrollPane.repaint();
        alertsScrollPane.revalidate();
    }
    
    public static void begin(LinkedBlockingQueue<UserPreferences> preferenceQueue, LinkedBlockingQueue<Alert> alertQueue, 
            LinkedBlockingQueue<Statistics> statsQueue, LinkedBlockingQueue<ArrayList<HttpObject>> mostHitsTopURL)
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new HomeFrame(preferenceQueue, alertQueue, statsQueue, mostHitsTopURL).setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alertTextField;
    private javax.swing.JScrollPane alertsScrollPane;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField logFilePathTextField;
    private javax.swing.JScrollPane mostHitsScrollPane;
    private javax.swing.JTable mostHitsTable;
    private javax.swing.JTextField mostHitsTextField;
    private javax.swing.JTable statsTable;
    private javax.swing.JTextField thresholdTextField;
    private javax.swing.JPanel userInputPanel;
    private javax.swing.JButton userPreferenceUpdateButton;
    // End of variables declaration//GEN-END:variables
}
